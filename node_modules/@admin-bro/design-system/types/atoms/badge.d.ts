import { SpaceProps, TypographyProps, ColorProps } from 'styled-system';
/**
 * Prop Types of an Button component.
 * Apart from those defined below it extends all {@link ColorProps}, {@link SpaceProps}
 * and {@link TypographyProps}
 *
 * @memberof module:@admin-bro/design-system.Badge
 * @alias BadgeProps
 * @property {string} [...] Other props from {@link ColorProps}, {@link SpaceProps}
 *                          and {@link TypographyProps}
 */
export declare type BadgeProps = SpaceProps & TypographyProps & ColorProps & {
    /**
     * Color variant
     */
    variant?: 'primary' | 'danger' | 'text' | 'success' | 'info' | 'secondary';
    /**
     * Outline version
     */
    outline?: boolean;
    /**
     * Size variant
     */
    size?: 'sm' | 'lg';
};
/**
 * Component representing a badge.
 *
 * Usage
 * ```javascript
 * import { Badge, BadgeProps } from '@admin-bro/design-system'
 * ```
 *
 * @component
 * @subcategory Atoms
 * @example <caption>Color variants</caption>
 * const variants = ['primary', 'danger', 'success', 'info', 'secondary']
 * return (
 * <Box py="lg">
 *   <Badge mb="default" mr="default">default</Badge>
 *   {variants.map(variant => (
 *     <Badge mb="default" variant={variant} mr="default">{variant}</Badge>
 *   ))}
 * </Box>
 * )
 * @example <caption>Outline badges</caption>
 * const variants = ['primary', 'danger', 'success', 'info', 'secondary']
 * return (
 * <Box py="lg">
 *   <Badge mb="default" mr="default" outline>default</Badge>
 *   {variants.map(variant => (
 *     <Badge mb="default" variant={variant} mr="default" outline>{variant}</Badge>
 *   ))}
 * </Box>
 * )
 * @example <caption>Different sizes</caption>
 * return (
 * <Box py="lg">
 *   <Badge ml="default" variant="primary" size="sm">small</Badge>
 *   <Badge ml="default" variant="primary">regular</Badge>
 *   <Badge ml="default" variant="primary" size="lg">large</Badge>
 * </Box>
 * )
 * @memberof module:@admin-bro/design-system
 */
declare const Badge: import("styled-components").StyledComponent<"span", import("styled-components").DefaultTheme, BadgeProps, never>;
export { Badge };
export default Badge;
