"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropDown = void 0;
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const StyledDropDown = styled_components_1.default.div `
  position: relative;
  display: inline-block;
`;
/**
 * Simple set of components allowing you to create a dropdowns.
 * Usage
 * ```javascript
 * import { DropDown, DropDownTrigger, DropDownMenu, DropDownItem } from '@admin-bro/design-system'
 * ```
 *
 * It contains couple of sub components:
 *
 * - DropDown - an actual wrapper for entire DropDown
 * - DropDownTrigger - it has to be right inside the DropDown.
 *   It is what user sees when the DropDown is not hovered
 * - DropDownMenu - wraps elements which are hidden by default.
 *   Shown after hovering Trigger
 * - DropDownMenuItem - it is a wrapper for a menu item list.
 *   It can next contain either Link or Button.
 *
 * Props:
 * - DropDownMenu extends {@link PositionProps}, so you can add prop like `top="xl"`
 * - DropDownItem extends {@link SpaceProps}
 * - DropDownTrigger also extends {@link SpaceProps}
 *
 * @example
 * return (
 *   <Box px="300px" pt="lg" pb="200px">
 *     <DropDown>
 *       <DropDownTrigger p="default">
 *         <Text as="span">This is trigger -> </Text>
 *         <Icon icon="OverflowMenuHorizontal" />
 *       </DropDownTrigger>
 *       <DropDownMenu top="xxl">
 *         <DropDownItem>
 *           <Link href="/some">
 *             <Icon icon="Video" />
 *             Some menu item
 *           </Link>
 *         </DropDownItem>
 *         <DropDownItem>
 *           <Link href="/some">Other item</Link>
 *         </DropDownItem>
 *       </DropDownMenu>
 *     </DropDown>
 *   </Box>
 * )
 * @component
 * @subcategory Molecules
 * @memberof module:@admin-bro/design-system
 */
const DropDown = (props) => {
    const { children } = props;
    const [isVisible, setIsVisible] = react_1.useState(false);
    const elements = react_1.default.Children.map(children, (child) => {
        const type = child && child.type && child.type.displayName;
        if (type === 'DropDownTrigger') {
            return react_1.default.cloneElement(child, {
                onMouseEnter: () => setIsVisible(true),
            });
        }
        if (type === 'DropDownMenu') {
            return react_1.default.cloneElement(child, { isVisible });
        }
        return child;
    });
    return (react_1.default.createElement(StyledDropDown, { onMouseEnter: () => setIsVisible(true), onMouseLeave: () => setIsVisible(false) }, elements));
};
exports.DropDown = DropDown;
exports.default = DropDown;
