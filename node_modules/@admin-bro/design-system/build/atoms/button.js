"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = exports.ButtonCSS = void 0;
const styled_components_1 = __importStar(require("styled-components"));
const styled_system_1 = require("styled-system");
const focus_shadow_style_1 = __importDefault(require("../utils/focus-shadow.style"));
const css_class_1 = require("../utils/css-class");
const variantShared = {
    color: 'white',
    'border-color': 'transparent',
    [`& .${css_class_1.cssClass('Icon')} svg`]: {
        fill: 'white',
    },
    '&:disabled': {
        bg: 'grey40',
    },
};
const buttonVariants = styled_system_1.variant({
    variants: {
        primary: Object.assign({ bg: 'primary100', '&:hover': {
                bg: 'hoverBg',
            }, className: css_class_1.cssClass(['Button', 'Button_Primary']) }, variantShared),
        danger: Object.assign({ bg: 'error', '&:hover': {
                bg: 'errorDark',
            }, className: css_class_1.cssClass(['Button', 'Button_Danger']) }, variantShared),
        success: Object.assign({ bg: 'success', '&:hover': {
                bg: 'successDark',
            }, className: css_class_1.cssClass(['Button', 'Button_Success']) }, variantShared),
        info: Object.assign({ bg: 'info', '&:hover': {
                bg: 'infoDark',
            }, className: css_class_1.cssClass(['Button', 'Button_Info']) }, variantShared),
        secondary: Object.assign({ bg: 'accent', className: css_class_1.cssClass(['Button', 'Button_Secondary']) }, variantShared),
        text: {
            bg: 'transparent',
            borderColor: 'transparent',
            '&:disabled': {
                'border-color': 'transparent',
            },
            '&:hover': {
                background: 'transparent',
                color: 'hoverBg',
                'border-color': 'transparent',
                'text-decoration': 'underline',
            },
            '&:focus': {
                background: 'transparent',
                'border-color': 'transparent',
            },
            '& svg': {
                fill: 'primary100',
            },
            '&:hover svg': {
                fill: 'hoverBg',
            },
            className: css_class_1.cssClass(['Button', 'Button_Text']),
        },
    },
});
const sizeVariants = styled_system_1.variant({
    prop: 'size',
    variants: {
        sm: {
            fontSize: 'default',
            py: 'sm',
            px: 'xxl',
            [`& .${css_class_1.cssClass('Icon')}`]: {
                paddingRight: 'sm',
            },
        },
        lg: {
            py: 'default',
            lineHeight: 'lg',
        },
        icon: {
            py: 'default',
            px: 'default',
            lineHeight: 'sm',
            minWidth: '34px',
            height: '34px',
            [`& .${css_class_1.cssClass('Icon')}`]: {
                padding: 0,
            },
        },
    },
});
/**
 * Button CSS Styles which can be reused in another button-like component with styled-components
 *
 * Usage:
 * ```
 * import { ButtonCSS } from '@admin-bro/design-system'
 * import { Link } from 'react-router-dom'
 *
 * const MyStyledLink = styled(Link)`
 *   ${ButtonCSS}
 * `
 * ```
 * @memberof Button
 * @alias ButtonCSS
 */
exports.ButtonCSS = styled_components_1.css `
  outline: 0;
  display: inline-block;
  font-family: ${({ theme }) => theme.font};
  line-height: ${({ theme }) => theme.lineHeights.lg};
  border: 1px solid ${({ theme }) => theme.colors.primary100};
  color: ${({ theme }) => theme.colors.primary100};
  cursor: pointer;
  text-decoration: none;
  padding: ${({ theme }) => theme.space.default} ${({ theme }) => theme.space.x3};
  box-sizing: border-box;

  & > .${css_class_1.cssClass('Icon')} {
    padding-bottom: 2px;
    vertical-align: middle;
    padding-right: ${({ theme }) => theme.space.default};
  }

  & .${css_class_1.cssClass('Icon')} svg {
    width: 16px;
    height: 16px;
    fill: ${({ theme }) => theme.colors.primary100};
  }
  &:hover {
    color: ${({ theme }) => theme.colors.white};
    background: ${({ theme }) => theme.colors.hoverBg};
    border-color: ${({ theme }) => theme.colors.hoverBg};
    & .${css_class_1.cssClass('Icon')} svg {
      fill: ${({ theme }) => theme.colors.white};
    }
  }
  &:focus {
    border-color: ${({ theme }) => theme.colors.accent};
    ${({ theme }) => `box-shadow: ${focus_shadow_style_1.default(theme)}`};
  }

  &:disabled {
    color: ${({ theme }) => theme.colors.grey60};
    border-color: ${({ theme }) => theme.colors.grey80};
    background: ${({ theme }) => theme.colors.white};
    cursor: default;
    & .${css_class_1.cssClass('Icon')} svg {
      fill: ${({ theme }) => theme.colors.grey60};
    }
  }

  ${({ rounded }) => (rounded ? 'border-radius: 9999px' : '')};

  ${styled_system_1.color};
  ${styled_system_1.space};
  ${styled_system_1.typography};
  ${buttonVariants};
  ${sizeVariants};
`;
/**
 * Buttons make common actions immediately visible and easy to perform with one click or tap.
 * They can be used for any type of action.
 *
 * * Usage
 * ```javascript
 * import { Button, ButtonCSS, ButtonProps } from '@admin-bro/design-system'
 * ```
 * @component
 * @subcategory Atoms
 * @example <caption>Color variants</caption>
 * const variants = ['primary', 'danger', 'success', 'info', 'secondary', 'text']
 * return (
 * <Box py="lg">
 *   <Button mb="default" mr="default">default</Button>
 *   {variants.map(variant => (
 *     <Button mb="default" variant={variant} mr="default">{variant}</Button>
 *   ))}
 * </Box>
 * )
 * @example <caption>Size variants</caption>
 * return (
 * <Box py="lg">
 *   <Button size="sm">Small</Button>
 *   <Button ml="default">Regular size</Button>
 *   <Button size="lg" ml="default">Large</Button>
 * </Box>
 * )
 * @example <caption>Icons</caption>
 * return (
 * <Box py="lg">
 *  <Button mr="default">
 *    <Icon icon="Settings" />
 *    With icon
 *  </Button>
 *  <Button size="icon" mr="default"><Icon icon="Settings" /></Button>
 *  <Button rounded size="icon" mr="default"><Icon icon="Settings" /></Button>
 *  <Button variant="danger" mr="default">
 *    <Icon icon="Delete" />
 *    Delete me
 *  </Button>
 *  <Button mr="default" variant="text" size="sm">
 *    <Icon icon="Add" />
 *    Create new item
 *  </Button>
 * </Box>
 * )
 * @example <caption>State</caption>
 * return (
 * <Box py="lg">
 *   <Button disabled>Disabled</Button>
 *   <Button ml="default" variant="primary" disabled>Disabled</Button>
 * </Box>
 * )
 *
 * @memberof module:@admin-bro/design-system
 */
const Button = styled_components_1.default.button `
  ${exports.ButtonCSS}
`;
exports.Button = Button;
Button.defaultProps = {
    fontSize: 'default',
    bg: 'transparent',
    className: css_class_1.cssClass('Button'),
};
exports.default = Button;
